# Registers:
# r7: Temporary
# r8: Temporary

alias width_address   = r0
alias height_address  = r1
alias width           = r2
alias height          = r3
alias loop_counter    = r4
alias loop_end        = r5
alias pixels_address  = r6

# Load width with the width address, and height with the height address
loadi width_address, 0x1000000
add height_address, width_address, 4

# Load width and height
load width, width_address
load height, height_address

# Load the loop counter with 0
loadi loop_counter, 0

# Load the loop end (uncomment as appropriate)
# Fixed loop end
# loadi loop_end, 2

# Width
# move loop_end, width

# Width * Height (full screen)
mul loop_end, width, height

# Set the starting address for pixels
add pixels_address, height_address, 4

# Load r7 with 255 (full channel)
loadi r7, 255

# Loop until we reach the end
loop:
  # Store 255 in R
  store byte pixels_address, r7
  # Move to G
  add pixels_address, pixels_address, 1
  # Bitwise-and loop counter with 255
  and r8, loop_counter, r7
  # Store the result of the and in G
  store byte pixels_address, r8
  # Move to next pixel
  add pixels_address, pixels_address, 2

  # Increment loop counter, compare, and jump
  add loop_counter, loop_counter, 1
  cmp loop_counter, loop_end
  jne loop

# Finish
halt